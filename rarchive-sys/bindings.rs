/* automatically generated by rust-bindgen 0.55.1 */

pub type __int64_t = ::std::os::raw::c_long;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __time_t = ::std::os::raw::c_long;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type time_t = __time_t;
pub type dev_t = __dev_t;
pub type mode_t = __mode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type ssize_t = __ssize_t;
pub type la_int64_t = i64;
pub type la_ssize_t = ssize_t;
extern "C" {
    pub fn archive_version_number() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_version_details() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_zlib_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_liblzma_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_bzlib_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_liblz4_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_libzstd_version() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct archive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct archive_entry {
    _unused: [u8; 0],
}
pub type archive_read_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        _buffer: *mut *const ::std::os::raw::c_void,
    ) -> la_ssize_t,
>;
pub type archive_skip_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        request: la_int64_t,
    ) -> la_int64_t,
>;
pub type archive_seek_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        offset: la_int64_t,
        whence: ::std::os::raw::c_int,
    ) -> la_int64_t,
>;
pub type archive_write_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        _buffer: *const ::std::os::raw::c_void,
        _length: size_t,
    ) -> la_ssize_t,
>;
pub type archive_open_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type archive_close_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type archive_switch_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data1: *mut ::std::os::raw::c_void,
        _client_data2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type archive_passphrase_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn archive_read_new() -> *mut archive;
}
extern "C" {
    pub fn archive_read_support_compression_all(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_bzip2(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_compress(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_gzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_lzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_lzma(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_none(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_program(
        arg1: *mut archive,
        command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_program_signature(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_rpm(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_uu(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_compression_xz(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_all(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_bzip2(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_compress(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_gzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_grzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_lrzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_lz4(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_lzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_lzma(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_lzop(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_none(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_program(
        arg1: *mut archive,
        command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_program_signature(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_rpm(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_uu(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_xz(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_filter_zstd(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_7zip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_all(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_ar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_by_code(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_cab(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_cpio(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_empty(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_gnutar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_iso9660(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_lha(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_mtree(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_rar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_rar5(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_raw(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_tar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_warc(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_xar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_zip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_zip_streamable(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_support_format_zip_seekable(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_format(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_append_filter(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_append_filter_program(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_append_filter_program_signature(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_open_callback(
        arg1: *mut archive,
        arg2: archive_open_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_read_callback(
        arg1: *mut archive,
        arg2: archive_read_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_seek_callback(
        arg1: *mut archive,
        arg2: archive_seek_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_skip_callback(
        arg1: *mut archive,
        arg2: archive_skip_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_close_callback(
        arg1: *mut archive,
        arg2: archive_close_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_switch_callback(
        arg1: *mut archive,
        arg2: archive_switch_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_callback_data(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_callback_data2(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_add_callback_data(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_append_callback_data(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_prepend_callback_data(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open1(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        arg2: archive_open_callback,
        arg3: archive_read_callback,
        arg4: archive_close_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open2(
        arg1: *mut archive,
        _client_data: *mut ::std::os::raw::c_void,
        arg2: archive_open_callback,
        arg3: archive_read_callback,
        arg4: archive_skip_callback,
        arg5: archive_close_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_filename(
        arg1: *mut archive,
        _filename: *const ::std::os::raw::c_char,
        _block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_filenames(
        arg1: *mut archive,
        _filenames: *mut *const ::std::os::raw::c_char,
        _block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_filename_w(
        arg1: *mut archive,
        _filename: *const wchar_t,
        _block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_file(
        arg1: *mut archive,
        _filename: *const ::std::os::raw::c_char,
        _block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_memory(
        arg1: *mut archive,
        buff: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_memory2(
        a: *mut archive,
        buff: *const ::std::os::raw::c_void,
        size: size_t,
        read_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_fd(
        arg1: *mut archive,
        _fd: ::std::os::raw::c_int,
        _block_size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_open_FILE(arg1: *mut archive, _file: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_next_header(
        arg1: *mut archive,
        arg2: *mut *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_next_header2(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_header_position(arg1: *mut archive) -> la_int64_t;
}
extern "C" {
    pub fn archive_read_has_encrypted_entries(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_format_capabilities(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_data(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> la_ssize_t;
}
extern "C" {
    pub fn archive_seek_data(
        arg1: *mut archive,
        arg2: la_int64_t,
        arg3: ::std::os::raw::c_int,
    ) -> la_int64_t;
}
extern "C" {
    pub fn archive_read_data_block(
        a: *mut archive,
        buff: *mut *const ::std::os::raw::c_void,
        size: *mut size_t,
        offset: *mut la_int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_data_skip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_data_into_fd(
        arg1: *mut archive,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_format_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_filter_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_options(
        _a: *mut archive,
        opts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_add_passphrase(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_set_passphrase_callback(
        arg1: *mut archive,
        client_data: *mut ::std::os::raw::c_void,
        arg2: archive_passphrase_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_extract(
        arg1: *mut archive,
        arg2: *mut archive_entry,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_extract2(
        arg1: *mut archive,
        arg2: *mut archive_entry,
        arg3: *mut archive,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_extract_set_progress_callback(
        arg1: *mut archive,
        _progress_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        _user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn archive_read_extract_set_skip_file(
        arg1: *mut archive,
        arg2: la_int64_t,
        arg3: la_int64_t,
    );
}
extern "C" {
    pub fn archive_read_close(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_finish(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_new() -> *mut archive;
}
extern "C" {
    pub fn archive_write_set_bytes_per_block(
        arg1: *mut archive,
        bytes_per_block: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_get_bytes_per_block(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_bytes_in_last_block(
        arg1: *mut archive,
        bytes_in_last_block: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_get_bytes_in_last_block(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_skip_file(
        arg1: *mut archive,
        arg2: la_int64_t,
        arg3: la_int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_bzip2(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_compress(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_gzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_lzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_lzma(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_none(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_program(
        arg1: *mut archive,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_compression_xz(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter(
        arg1: *mut archive,
        filter_code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_by_name(
        arg1: *mut archive,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_b64encode(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_bzip2(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_compress(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_grzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_gzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_lrzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_lz4(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_lzip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_lzma(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_lzop(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_none(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_program(
        arg1: *mut archive,
        cmd: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_uuencode(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_xz(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_add_filter_zstd(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format(
        arg1: *mut archive,
        format_code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_by_name(
        arg1: *mut archive,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_7zip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_ar_bsd(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_ar_svr4(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_cpio(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_cpio_newc(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_gnutar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_iso9660(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_mtree(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_mtree_classic(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_pax(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_pax_restricted(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_raw(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_shar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_shar_dump(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_ustar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_v7tar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_warc(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_xar(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_zip(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_filter_by_ext(
        a: *mut archive,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_filter_by_ext_def(
        a: *mut archive,
        filename: *const ::std::os::raw::c_char,
        def_ext: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_zip_set_compression_deflate(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_zip_set_compression_store(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: archive_open_callback,
        arg4: archive_write_callback,
        arg5: archive_close_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_fd(
        arg1: *mut archive,
        _fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_filename(
        arg1: *mut archive,
        _file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_filename_w(
        arg1: *mut archive,
        _file: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_file(
        arg1: *mut archive,
        _file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_FILE(arg1: *mut archive, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_open_memory(
        arg1: *mut archive,
        _buffer: *mut ::std::os::raw::c_void,
        _buffSize: size_t,
        _used: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_header(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_data(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
    ) -> la_ssize_t;
}
extern "C" {
    pub fn archive_write_data_block(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
        arg4: la_int64_t,
    ) -> la_ssize_t;
}
extern "C" {
    pub fn archive_write_finish_entry(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_close(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_fail(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_finish(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_format_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_filter_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_option(
        _a: *mut archive,
        m: *const ::std::os::raw::c_char,
        o: *const ::std::os::raw::c_char,
        v: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_options(
        _a: *mut archive,
        opts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_passphrase(
        _a: *mut archive,
        p: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_set_passphrase_callback(
        arg1: *mut archive,
        client_data: *mut ::std::os::raw::c_void,
        arg2: archive_passphrase_callback,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_new() -> *mut archive;
}
extern "C" {
    pub fn archive_write_disk_set_skip_file(
        arg1: *mut archive,
        arg2: la_int64_t,
        arg3: la_int64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_set_options(
        arg1: *mut archive,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_set_standard_lookup(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_set_group_lookup(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: la_int64_t,
            ) -> la_int64_t,
        >,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_set_user_lookup(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: la_int64_t,
            ) -> la_int64_t,
        >,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_write_disk_gid(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        arg3: la_int64_t,
    ) -> la_int64_t;
}
extern "C" {
    pub fn archive_write_disk_uid(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        arg3: la_int64_t,
    ) -> la_int64_t;
}
extern "C" {
    pub fn archive_read_disk_new() -> *mut archive;
}
extern "C" {
    pub fn archive_read_disk_set_symlink_logical(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_symlink_physical(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_symlink_hybrid(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_entry_from_file(
        arg1: *mut archive,
        arg2: *mut archive_entry,
        arg3: ::std::os::raw::c_int,
        arg4: *const stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_gname(
        arg1: *mut archive,
        arg2: la_int64_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_read_disk_uname(
        arg1: *mut archive,
        arg2: la_int64_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_read_disk_set_standard_lookup(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_gname_lookup(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: la_int64_t,
            ) -> *const ::std::os::raw::c_char,
        >,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_uname_lookup(
        arg1: *mut archive,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: la_int64_t,
            ) -> *const ::std::os::raw::c_char,
        >,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_open(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_open_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_descend(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_can_descend(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_current_filesystem(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_current_filesystem_is_synthetic(
        arg1: *mut archive,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_current_filesystem_is_remote(
        arg1: *mut archive,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_atime_restored(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_behavior(
        arg1: *mut archive,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_matching(
        arg1: *mut archive,
        _matching: *mut archive,
        _excluded_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut archive,
                arg2: *mut ::std::os::raw::c_void,
                arg3: *mut archive_entry,
            ),
        >,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_read_disk_set_metadata_filter_callback(
        arg1: *mut archive,
        _metadata_filter_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut archive,
                arg2: *mut ::std::os::raw::c_void,
                arg3: *mut archive_entry,
            ) -> ::std::os::raw::c_int,
        >,
        _client_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_filter_count(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_filter_bytes(arg1: *mut archive, arg2: ::std::os::raw::c_int) -> la_int64_t;
}
extern "C" {
    pub fn archive_filter_code(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_filter_name(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_position_compressed(arg1: *mut archive) -> la_int64_t;
}
extern "C" {
    pub fn archive_position_uncompressed(arg1: *mut archive) -> la_int64_t;
}
extern "C" {
    pub fn archive_compression_name(arg1: *mut archive) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_compression(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_errno(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_error_string(arg1: *mut archive) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_format_name(arg1: *mut archive) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_format(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_clear_error(arg1: *mut archive);
}
extern "C" {
    pub fn archive_set_error(
        arg1: *mut archive,
        _err: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn archive_copy_error(dest: *mut archive, src: *mut archive);
}
extern "C" {
    pub fn archive_file_count(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_new() -> *mut archive;
}
extern "C" {
    pub fn archive_match_free(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_excluded(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_path_excluded(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_set_inclusion_recursion(
        arg1: *mut archive,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_exclude_pattern(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_exclude_pattern_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_exclude_pattern_from_file(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        _nullSeparator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_exclude_pattern_from_file_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
        _nullSeparator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_pattern(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_pattern_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_pattern_from_file(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
        _nullSeparator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_pattern_from_file_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
        _nullSeparator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_path_unmatched_inclusions(arg1: *mut archive) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_path_unmatched_inclusions_next(
        arg1: *mut archive,
        arg2: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_path_unmatched_inclusions_next_w(
        arg1: *mut archive,
        arg2: *mut *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_time_excluded(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_time(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        _sec: time_t,
        _nsec: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_date(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        _datestr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_date_w(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        _datestr: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_file_time(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        _pathname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_file_time_w(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        _pathname: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_exclude_entry(
        arg1: *mut archive,
        _flag: ::std::os::raw::c_int,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_owner_excluded(
        arg1: *mut archive,
        arg2: *mut archive_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_uid(arg1: *mut archive, arg2: la_int64_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_gid(arg1: *mut archive, arg2: la_int64_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_uname(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_uname_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_gname(
        arg1: *mut archive,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_match_include_gname_w(
        arg1: *mut archive,
        arg2: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_utility_string_sort(
        arg1: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_clear(arg1: *mut archive_entry) -> *mut archive_entry;
}
extern "C" {
    pub fn archive_entry_clone(arg1: *mut archive_entry) -> *mut archive_entry;
}
extern "C" {
    pub fn archive_entry_free(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_new() -> *mut archive_entry;
}
extern "C" {
    pub fn archive_entry_new2(arg1: *mut archive) -> *mut archive_entry;
}
extern "C" {
    pub fn archive_entry_atime(arg1: *mut archive_entry) -> time_t;
}
extern "C" {
    pub fn archive_entry_atime_nsec(arg1: *mut archive_entry) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn archive_entry_atime_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_birthtime(arg1: *mut archive_entry) -> time_t;
}
extern "C" {
    pub fn archive_entry_birthtime_nsec(arg1: *mut archive_entry) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn archive_entry_birthtime_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_ctime(arg1: *mut archive_entry) -> time_t;
}
extern "C" {
    pub fn archive_entry_ctime_nsec(arg1: *mut archive_entry) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn archive_entry_ctime_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_dev(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_dev_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_devmajor(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_devminor(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_filetype(arg1: *mut archive_entry) -> mode_t;
}
extern "C" {
    pub fn archive_entry_fflags(
        arg1: *mut archive_entry,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn archive_entry_fflags_text(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_gid(arg1: *mut archive_entry) -> la_int64_t;
}
extern "C" {
    pub fn archive_entry_gname(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_gname_utf8(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_gname_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_hardlink(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_hardlink_utf8(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_hardlink_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_ino(arg1: *mut archive_entry) -> la_int64_t;
}
extern "C" {
    pub fn archive_entry_ino64(arg1: *mut archive_entry) -> la_int64_t;
}
extern "C" {
    pub fn archive_entry_ino_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_mode(arg1: *mut archive_entry) -> mode_t;
}
extern "C" {
    pub fn archive_entry_mtime(arg1: *mut archive_entry) -> time_t;
}
extern "C" {
    pub fn archive_entry_mtime_nsec(arg1: *mut archive_entry) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn archive_entry_mtime_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_nlink(arg1: *mut archive_entry) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn archive_entry_pathname(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_pathname_utf8(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_pathname_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_perm(arg1: *mut archive_entry) -> mode_t;
}
extern "C" {
    pub fn archive_entry_rdev(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_rdevmajor(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_rdevminor(arg1: *mut archive_entry) -> dev_t;
}
extern "C" {
    pub fn archive_entry_sourcepath(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_sourcepath_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_size(arg1: *mut archive_entry) -> la_int64_t;
}
extern "C" {
    pub fn archive_entry_size_is_set(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_strmode(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_symlink(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_symlink_utf8(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_symlink_type(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_symlink_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_uid(arg1: *mut archive_entry) -> la_int64_t;
}
extern "C" {
    pub fn archive_entry_uname(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_uname_utf8(arg1: *mut archive_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_uname_w(arg1: *mut archive_entry) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_is_data_encrypted(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_is_metadata_encrypted(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_is_encrypted(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_atime(
        arg1: *mut archive_entry,
        arg2: time_t,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn archive_entry_unset_atime(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_set_birthtime(
        arg1: *mut archive_entry,
        arg2: time_t,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn archive_entry_unset_birthtime(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_set_ctime(
        arg1: *mut archive_entry,
        arg2: time_t,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn archive_entry_unset_ctime(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_set_dev(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_devmajor(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_devminor(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_filetype(arg1: *mut archive_entry, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn archive_entry_set_fflags(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_ulong,
        arg3: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn archive_entry_copy_fflags_text(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_copy_fflags_text_w(
        arg1: *mut archive_entry,
        arg2: *const wchar_t,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_set_gid(arg1: *mut archive_entry, arg2: la_int64_t);
}
extern "C" {
    pub fn archive_entry_set_gname(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_set_gname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_gname(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_copy_gname_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_gname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_hardlink(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_set_hardlink_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_hardlink(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_hardlink_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_hardlink_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_ino(arg1: *mut archive_entry, arg2: la_int64_t);
}
extern "C" {
    pub fn archive_entry_set_ino64(arg1: *mut archive_entry, arg2: la_int64_t);
}
extern "C" {
    pub fn archive_entry_set_link(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_set_link_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_link(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_copy_link_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_link_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_mode(arg1: *mut archive_entry, arg2: mode_t);
}
extern "C" {
    pub fn archive_entry_set_mtime(
        arg1: *mut archive_entry,
        arg2: time_t,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn archive_entry_unset_mtime(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_set_nlink(arg1: *mut archive_entry, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn archive_entry_set_pathname(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_set_pathname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_pathname(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_pathname_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_pathname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_perm(arg1: *mut archive_entry, arg2: mode_t);
}
extern "C" {
    pub fn archive_entry_set_rdev(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_rdevmajor(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_rdevminor(arg1: *mut archive_entry, arg2: dev_t);
}
extern "C" {
    pub fn archive_entry_set_size(arg1: *mut archive_entry, arg2: la_int64_t);
}
extern "C" {
    pub fn archive_entry_unset_size(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_copy_sourcepath(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_sourcepath_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_set_symlink(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_set_symlink_type(arg1: *mut archive_entry, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn archive_entry_set_symlink_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_symlink(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_symlink_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_symlink_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_uid(arg1: *mut archive_entry, arg2: la_int64_t);
}
extern "C" {
    pub fn archive_entry_set_uname(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_set_uname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_copy_uname(arg1: *mut archive_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn archive_entry_copy_uname_w(arg1: *mut archive_entry, arg2: *const wchar_t);
}
extern "C" {
    pub fn archive_entry_update_uname_utf8(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_set_is_data_encrypted(
        arg1: *mut archive_entry,
        is_encrypted: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_set_is_metadata_encrypted(
        arg1: *mut archive_entry,
        is_encrypted: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn archive_entry_stat(arg1: *mut archive_entry) -> *const stat;
}
extern "C" {
    pub fn archive_entry_copy_stat(arg1: *mut archive_entry, arg2: *const stat);
}
extern "C" {
    pub fn archive_entry_mac_metadata(
        arg1: *mut archive_entry,
        arg2: *mut size_t,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn archive_entry_copy_mac_metadata(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
    );
}
extern "C" {
    pub fn archive_entry_acl_clear(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_acl_add_entry(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_add_entry_w(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_reset(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_next(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_to_text_w(
        arg1: *mut archive_entry,
        arg2: *mut la_ssize_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn archive_entry_acl_to_text(
        arg1: *mut archive_entry,
        arg2: *mut la_ssize_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_acl_from_text_w(
        arg1: *mut archive_entry,
        arg2: *const wchar_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_from_text(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_text_w(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
    ) -> *const wchar_t;
}
extern "C" {
    pub fn archive_entry_acl_text(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn archive_entry_acl_types(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_acl_count(
        arg1: *mut archive_entry,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct archive_acl {
    _unused: [u8; 0],
}
extern "C" {
    pub fn archive_entry_acl(arg1: *mut archive_entry) -> *mut archive_acl;
}
extern "C" {
    pub fn archive_entry_xattr_clear(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_xattr_add_entry(
        arg1: *mut archive_entry,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_void,
        arg4: size_t,
    );
}
extern "C" {
    pub fn archive_entry_xattr_count(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_xattr_reset(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_xattr_next(
        arg1: *mut archive_entry,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut *const ::std::os::raw::c_void,
        arg4: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_sparse_clear(arg1: *mut archive_entry);
}
extern "C" {
    pub fn archive_entry_sparse_add_entry(
        arg1: *mut archive_entry,
        arg2: la_int64_t,
        arg3: la_int64_t,
    );
}
extern "C" {
    pub fn archive_entry_sparse_count(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_sparse_reset(arg1: *mut archive_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn archive_entry_sparse_next(
        arg1: *mut archive_entry,
        arg2: *mut la_int64_t,
        arg3: *mut la_int64_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct archive_entry_linkresolver {
    _unused: [u8; 0],
}
extern "C" {
    pub fn archive_entry_linkresolver_new() -> *mut archive_entry_linkresolver;
}
extern "C" {
    pub fn archive_entry_linkresolver_set_strategy(
        arg1: *mut archive_entry_linkresolver,
        arg2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn archive_entry_linkresolver_free(arg1: *mut archive_entry_linkresolver);
}
extern "C" {
    pub fn archive_entry_linkify(
        arg1: *mut archive_entry_linkresolver,
        arg2: *mut *mut archive_entry,
        arg3: *mut *mut archive_entry,
    );
}
extern "C" {
    pub fn archive_entry_partial_links(
        res: *mut archive_entry_linkresolver,
        links: *mut ::std::os::raw::c_uint,
    ) -> *mut archive_entry;
}
